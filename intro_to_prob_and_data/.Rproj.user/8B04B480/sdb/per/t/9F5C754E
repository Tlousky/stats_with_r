{
    "collab_server" : "",
    "contents" : "---\ntitle: \"Introduction to data\"\noutput: statsr:::statswithr_lab\n---\n\n<div id=\"instructions\">\nComplete all **Exercises**, and submit answers to **Questions** on the Coursera \nplatform.\n</div>\n\nSome define statistics as the field that focuses on turning information into\nknowledge. The first step in that process is to summarize and describe the raw\ninformation - the data. In this lab we explore flights, specifically a random\nsample of domestic flights that departed from the three major \nNew York City airport in 2013. We will generate simple graphical and numerical \nsummaries of data on these flights and explore delay times. As this is a large \ndata set, along the way you'll also learn the indispensable skills of data \nprocessing and subsetting.\n\n## Getting started\n\n### Load packages\n\nIn this lab we will explore the data using the `dplyr` package and visualize it \nusing the `ggplot2` package for data visualization. The data can be found in the\ncompanion package for this course, `statsr`.\n\nLet's load the packages.\n\n```{r load-packages, message=FALSE}\nlibrary(statsr)\nlibrary(dplyr)\nlibrary(ggplot2)\n```\n\n### Data\n\nThe [Bureau of Transportation Statistics](http://www.rita.dot.gov/bts/about/) \n(BTS) is a statistical agency that is a part of the Research and Innovative \nTechnology Administration (RITA). As its name implies, BTS collects and makes \navailable transportation data, such as the flights data we will be working with \nin this lab.\n\nWe begin by loading the `nycflights` data frame. Type the following in your console\nto load the data:\n\n```{r load-data}\ndata(nycflights)\n```\n\nThe data frame containing `r nrow(nycflights)` flights that shows up in your \nworkspace is a *data matrix*, with each row representing an *observation* and each \ncolumn representing a *variable*. R calls this data format a **data frame**, which is \na term that will be used throughout the labs.\n\nTo view the names of the variables, type the command\n\n```{r names}\nnames(nycflights)\n```\n\nThis returns the names of the variables in this data frame. The **codebook**\n(description of the variables) is included below. This information can also be\nfound in the help file for the data frame which can be accessed by typing\n`?nycflights` in the console.\n\n- `year`, `month`, `day`: Date of departure\n- `dep_time`, `arr_time`: Departure and arrival times, local timezone.\n- `dep_delay`, `arr_delay`: Departure and arrival delays, in minutes. Negative times represent early departures/arrivals.\n- `carrier`: Two letter carrier abbreviation.\n    + `9E`:           Endeavor Air Inc.\n    + `AA`:      American Airlines Inc.\n    + `AS`:        Alaska Airlines Inc.\n    + `B6`:             JetBlue Airways\n    + `DL`:        Delta Air Lines Inc.\n    + `EV`:    ExpressJet Airlines Inc.\n    + `F9`:      Frontier Airlines Inc.\n    + `FL`: AirTran Airways Corporation\n    + `HA`:      Hawaiian Airlines Inc.\n    + `MQ`:                   Envoy Air\n    + `OO`:       SkyWest Airlines Inc.\n    + `UA`:       United Air Lines Inc.\n    + `US`:             US Airways Inc.\n    + `VX`:              Virgin America\n    + `WN`:      Southwest Airlines Co.\n    + `YV`:          Mesa Airlines Inc.\n- `tailnum`: Plane tail number\n- `flight`: Flight number\n- `origin`, `dest`: Airport codes for origin and destination. (Google can help\nyou with what code stands for which airport.)\n- `air_time`: Amount of time spent in the air, in minutes.\n- `distance`: Distance flown, in miles.\n- `hour`, `minute`: Time of departure broken in to hour and minutes.\n\nA very useful function for taking a quick peek at your data frame, and viewing\nits dimensions and data types is `str`, which stands for **str**ucture.\n\n```{r str}\nstr(nycflights)\n```\n\nThe `nycflights` data frame is a massive trove of information. Let's think about \nsome questions we might want to answer with these data:\n\n- We might want to find out how delayed flights headed to a particular \ndestination tend to be. \n- We might want to evaluate how departure delays vary over months. \n- Or we might want to determine which of the three major NYC airports has a better \non time percentage for departing flights.\n\n### Seven verbs\n\nThe `dplyr` package offers seven verbs (functions) for basic data \nmanipulation:\n\n- `filter()`\n- `arrange()`\n- `select()` \n- `distinct()`\n- `mutate()`\n- `summarise()`\n- `sample_n()`\n\nWe will use some of these functions in this lab, and learn about others in a \nfuture lab.\n\n\n## Analysis\n\n### Departure delays in flights to Raleigh-Durham (RDU)\n\nWe can examine the distribution of departure delays of all flights with a \nhistogram.\n\n```{r hist-dep-delay}\nggplot(data = nycflights, aes(x = dep_delay)) +\n  geom_histogram()\n```\n\nThis function says to plot the `dep_delay` variable from the `nycflights` data \nframe on the x-axis. It also defines a `geom` (short for geometric object), \nwhich describes the type of plot you will produce. \n\nHistograms are generally a very good way to see the shape of a single \ndistribution, but that shape can change depending on how the data is split \nbetween the different bins. You can easily define the binwidth you want to use:\n\n```{r hist-dep-delay-bins}\nggplot(data = nycflights, aes(x = dep_delay)) +\n  geom_histogram(binwidth = 15)\nggplot(data = nycflights, aes(x = dep_delay)) +\n  geom_histogram(binwidth = 150)\n```\n\n<div id=\"exercise\">\n**Exercise**: How do these three histograms with the various binwidths compare?\n</div>\n\nIf we want to focus on departure delays of flights headed to RDU only, we need to\nfirst `filter` the data for flights headed to RDU (`dest == \"RDU\"`) and then make\na histogram of only departure delays of only those flights.\n\n```{r rdu-flights-hist}\nrdu_flights <- nycflights %>%\n  filter(dest == \"RDU\")\nggplot(data = rdu_flights, aes(x = dep_delay)) +\n  geom_histogram()\n```\n\nLet's decipher these three lines of code:\n\n- Line 1: Take the `nycflights` data frame, `filter` for flights headed to RDU, and \nsave the result as a new data frame called `rdu_flights`.\n    + `==` means \"if it's equal to\".\n    + `RDU` is in quotation marks since it is a character string.\n- Line 2: Basically the same `ggplot` call from earlier for making a histogram, \nexcept that it uses the data frame for flights headed to RDU instead of all\nflights.\n\n<div id=\"boxedtext\">\n**Logical operators: ** Filtering for certain observations (e.g. flights from a \nparticular airport) is often of interest in data frames where we might want to \nexamine observations with certain characteristics separately from the rest of \nthe data. To do so we use the `filter` function and a series of \n**logical operators**. The most commonly used logical operators for data \nanalysis are as follows:\n\n- `==` means \"equal to\"\n- `!=` means \"not equal to\"\n- `>` or `<` means \"greater than\" or \"less than\"\n- `>=` or `<=` means \"greater than or equal to\" or \"less than or equal to\"\n</div>\n\nWe can also obtain numerical summaries for these flights:\n\n```{r rdu-flights-summ}\nrdu_flights %>%\n  summarise(mean_dd = mean(dep_delay), sd_dd = sd(dep_delay), n = n())\n```\n\nNote that in the `summarise` function we created a list of two elements. The \nnames of these elements are user defined, like `mean_dd`, `sd_dd`, `n`, and \nyou could customize these names as you like (just don't use spaces in your \nnames). Calculating these summary statistics also require that you know the \nfunction calls. Note that `n()` reports the sample size.\n\n<div id=\"boxedtext\">\n**Summary statistics: ** Some useful function calls for summary statistics for a \nsingle numerical variable are as follows:\n\n- `mean`\n- `median`\n- `sd`\n- `var`\n- `IQR`\n- `range`\n- `min`\n- `max`\n</div>\n\nWe can also filter based on multiple criteria. Suppose we are interested in\nflights headed to San Francisco (SFO) in February:\n\n```{r}\nsfo_feb_flights <- nycflights %>%\n  filter(dest == \"SFO\", month == 2)\n```\n\nNote that we can separate the conditions using commas if we want flights that\nare both headed to SFO **and** in February. If we are interested in either\nflights headed to SFO **or** in February we can use the `|` instead of the comma.\n\n1. Create a new data frame that includes flights headed to SFO in February, and save \nthis data frame as `sfo_feb_flights`. How many flights meet these criteria? \n<ol>\n<li> 68 </li> \n<li> 1345 </li> \n<li> 2286 </li> \n<li> 3563 </li>\n<li> 32735 </li>\n</ol>\n\n```{r sfo-feb-flights}\nsfo_feb_flights <- nycflights %>%\n  filter(dest == \"SFO\", month == 2)\nnrow( sfo_feb_flights )\n```\n\n\n2. Make a histogram and calculate appropriate summary statistics for **arrival** \ndelays of `sfo_feb_flights`. Which of the following is false? \n<ol>\n<li> The distribution is unimodal. </li> \n<li> The distribution is right skewed. </li> \n<li> No flight is delayed more than 2 hours. </li> \n<li> The distribution has several extreme values on the right side. </li>\n<li> More than 50% of flights arrive on time or earlier than scheduled. </li>\n</ol>\n\n```{r sfo-feb-flights-arrival-delays}\nsfo_feb_flights <- nycflights %>%\n  filter(dest == \"SFO\", month == 2)\nggplot(data = sfo_feb_flights, aes(x = arr_delay)) +\n  geom_histogram()\n```\n\nAnother useful functionality is being able to quickly calculate summary \nstatistics for various groups in your data frame. For example, we can modify the \nabove command using the `group_by` function to get the same summary stats for \neach origin airport:\n\n```{r summary-custom-list-origin}\nrdu_flights %>%\n  group_by(origin) %>%\n  summarise(mean_dd = mean(dep_delay), sd_dd = sd(dep_delay), n = n())\n```\n\nHere, we first grouped the data by `origin`, and then calculated the summary \nstatistics.\n\n3.  Calculate the median and interquartile range for `arr_delay`s of flights in the \n`sfo_feb_flights` data frame, grouped by carrier. Which carrier is the has the hights \nIQR of arrival delays? \n<ol>\n<li> American Airlines </li> \n<li> JetBlue Airways </li> \n<li> Virgin America </li> \n<li> Delta and United Airlines </li>\n<li> Frontier Airlines </li>\n</ol>\n\n```{r sfo-feb-flights-arrival-delays-carrier}\nnycflights                                                                       %>% \n    filter(dest == \"SFO\", month == 2)                                            %>%\n    group_by(carrier)                                                            %>%\n    summarise( median_ad = median(arr_delay), iqr_ad = IQR(arr_delay), n = n() ) %>%\n    arrange( iqr_ad )\n```\n\n### Departure delays over months\n\nWhich month would you expect to have the highest average delay departing \nfrom an NYC airport?\n\nLet's think about how we would answer this question:\n\n- First, calculate monthly averages for departure delays. With the new language\nwe are learning, we need to\n    + `group_by` months, then\n    + `summarise` mean departure delays.\n- Then, we need to `arrange` these average delays in `desc`ending order\n\n```{r mean-dep-delay-months}\nnycflights %>%\n  group_by(month) %>%\n  summarise(mean_dd = mean(dep_delay)) %>%\n  arrange(desc(mean_dd))\n```\n\n4.  Which month has the highest average departure delay from an NYC airport? \n<ol>\n<li> January </li> \n<li> March </li> \n<li> July </li> \n<li> October </li>\n<li> December </li>\n</ol>\n\n```{r highest-avg-dep-delay-month}\nnycflights %>%\n  group_by(month) %>%\n  summarise(mean_dd = mean(dep_delay)) %>%\n  arrange(desc(mean_dd))\n```\n\n\n5.  Which month has the highest median departure delay from an NYC airport?\n<ol>\n<li> January </li> \n<li> March </li> \n<li> July </li> \n<li> October </li>\n<li> December </li>\n</ol>\n\n```{r highest-median-dep-delay-month}\nnycflights %>%\n  group_by(month) %>%\n  summarise(median_dd = median(dep_delay)) %>%\n  arrange(desc(median_dd))\n```\n\n\n6.  Is the mean or the median a more reliable measure for deciding which month(s) to \navoid flying if you really dislike delayed flights, and why? \n<ol>\n<li> Mean would be more reliable as it gives us the true average. </li> \n<li> Mean would be more reliable as the distribution of delays is symmetric. </li> \n<li> Median would be more reliable as the distribution of delays is skewed. </li> \n<li> Median would be more reliable as the distribution of delays is symmetric. </li>\n<li> Both give us useful information. </li>\n</ol>\n\n\nWe can also visualize the distributions of departure delays across months using \nside-by-side box plots:\n\n```{r delay-month-box}\nggplot(nycflights, aes(x = factor(month), y = dep_delay)) +\n  geom_boxplot()\n```\n\nThere is some new syntax here: We want departure delays on the y-axis and the\nmonths on the x-axis to produce side-by-side box plots. Side-by-side box plots\nrequire a categorical variable on the x-axis, however in the data frame `month` is \nstored as a numerical variable (numbers 1 - 12). Therefore we can force R to treat\nthis variable as categorical, what R calls a **factor**, variable with \n`factor(month)`.\n\n### On time departure rate for NYC airports\n\nSuppose you will be flying out of NYC and want to know which of the \nthree major NYC airports has the best on time departure rate of departing flights. \nSuppose also that for you a flight that is delayed for less than 5 minutes is \nbasically \"on time\". You consider any flight delayed for 5 minutes of more to be \n\"delayed\".\n\nIn order to determine which airport has the best on time departure rate, \nwe need to \n\n- first classify each flight as \"on time\" or \"delayed\",\n- then group flights by origin airport,\n- then calculate on time departure rates for each origin airport,\n- and finally arrange the airports in descending order for on time departure\npercentage.\n\nLet's start with classifying each flight as \"on time\" or \"delayed\" by\ncreating a new variable with the `mutate` function.\n\n```{r dep-type}\nnycflights <- nycflights %>%\n  mutate(dep_type = ifelse(dep_delay < 5, \"on time\", \"delayed\"))\n```\n\nThe first argument in the `mutate` function is the name of the new variable\nwe want to create, in this case `dep_type`. Then if `dep_delay < 5` we classify \nthe flight as `\"on time\"` and `\"delayed\"` if not, i.e. if the flight is delayed \nfor 5 or more minutes.\n\nNote that we are also overwriting the `nycflights` data frame with the new \nversion of this data frame that includes the new `dep_type` variable.\n\nWe can handle all the remaining steps in one code chunk:\n\n```{r}\nnycflights %>%\n  group_by(origin) %>%\n  summarise(ot_dep_rate = sum(dep_type == \"on time\") / n()) %>%\n  arrange(desc(ot_dep_rate))\n```\n\n**The summarise step is telling R to count up how many records of the currently found group are on time - sum(dep_type == \"on time”) - and divide that result by the total number of elements in the currently found group - n() - to get a proportion, then to store the answer in a new variable called ot_dep_rate.**\n\n7.  If you were selecting an airport simply based on on time departure percentage, \nwhich NYC airport would you choose to fly out of? \n<ol>\n<li> EWR </li> \n<li> JFK </li> \n<li> LGA </li> \n</ol>\n\n```{r on-time-dep-perc-airport}\ns <- nycflights %>%\n  group_by(origin) %>%\n  summarise(ot_dep_rate = sum(dep_type == \"on time\") / n()) %>%\n  arrange(desc(ot_dep_rate))\ns[ s$ot_dep_rate == max( s$ot_dep_rate ), 'origin' ]\n```\n\nWe can also visualize the distribution of on on time departure rate across \nthe three airports using a segmented bar plot.\n\n```{r}\nggplot(data = nycflights, aes(x = origin, fill = dep_type)) +\n  geom_bar()\n```\n\n8.  Mutate the data frame so that it includes a new variable that contains the \naverage speed, `avg_speed` traveled by the plane for each flight (in mph). What is \nthe tail number of the plane with the fastest `avg_speed`? **Hint:** Average speed \ncan be calculated as distance divided by number of hours of travel, and note that \n`air_time` is given in minutes. If you just want to show the `avg_speed` and \n`tailnum` and none of the other variables, use the select function at the end of your \npipe to select just these two variables with `select(avg_speed, tailnum)`. You can \nGoogle this tail number to find out more about the aircraft. \n<ol>\n<li> N666DN </li> \n<li> N755US </li> \n<li> N779JB </li> \n<li> N947UW </li> \n<li> N959UW </li> \n</ol>\n\n```{r fastest-avg-speed-tailnum}\nnycflights <- nycflights %>%\n  mutate(avg_speed = distance / ( air_time / 60 ) )\nnycflights[, c('avg_speed','tailnum') ] %>% arrange( desc(avg_speed) ) %>% head( 1 )\n```\n\n\n9.  Make a scatterplot of `avg_speed` vs. `distance`. Which of the following is true \nabout the relationship between average speed and distance. \n<ol>\n<li> As distance increases the average speed of flights decreases. </li> \n<li> The relationship is linear. </li> \n<li> There is an overall postive association between distance and average speed.</li> \n<li> There are no outliers. </li> \n<li> The distribution of distances are uniform over 0 to 5000 miles. </li> \n</ol>\n\n```{r avg-speed-dist-scatter}\nggplot( nycflights, aes( x = avg_speed, y = distance ) ) + geom_point()\n```\n\n\n10.  Suppose you define a flight to be \"on time\" if it gets to the destination on \ntime or earlier than expected, regardless of any departure delays. Mutate the data \nframe to create a new variable called `arr_type` with levels `\"on time\"` and \n`\"delayed\"` based on this definition. Then, determine the on time arrival percentage \nbased on whether the flight departed on time or not. What proportion of flights  that \nwere `\"delayed\"` departing arrive `\"on time\"`? \n[NUMERIC INPUT]\n\n```{r on-time-arr-perc}\nnycflights <- nycflights %>%\n  mutate(arr_type = ifelse(arr_delay <= 0, \"on time\", \"delayed\"))\n\ndelayed = nycflights %>% filter( dep_type == 'delayed' )\n\ndelayed                   %>% \n    group_by( arr_type )  %>%  \n    summarize( p_delayed_on_time = n() / nrow( delayed ) )\n```",
    "created" : 1467494571168.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2835007331",
    "id" : "9F5C754E",
    "lastKnownWriteTime" : 1467567879,
    "last_content_update" : 1467567879916,
    "path" : "~/GitHub/stats_with_r/intro_to_prob_and_data/week2_lab/intro_to_data_Coursera.Rmd",
    "project_path" : "week2_lab/intro_to_data_Coursera.Rmd",
    "properties" : {
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_markdown"
}