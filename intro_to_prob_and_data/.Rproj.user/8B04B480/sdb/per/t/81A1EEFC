{
    "collab_server" : "",
    "contents" : "---\ntitle: \"Introduction to R and RStudio\"\noutput: statsr:::statswithr_lab\n---\n\n<div id=\"instructions\">\nComplete all **Exercises**, and submit answers to **Questions** on the Coursera \nplatform.\n</div>\n\nThe goal of this lab is to introduce you to R and RStudio, which you'll be using\nthroughout the course both to learn the statistical concepts discussed in the \ncourse and to analyze real data and come to informed conclusions. To straighten \nout which is which: R is the name of the programming language itself and RStudio \nis a convenient interface.\n\nAs the labs progress, you are encouraged to explore beyond what the labs dictate;\na willingness to experiment will make you a much better programmer. Before we \nget to that stage, however, you need to build some basic fluency in R. Today we\nbegin with the fundamental building blocks of R and RStudio: the interface, \nreading in data, and basic commands.\n\n## RStudio\n\nYour RStudio window has four panels.\n\nYour R Markdown file (this document) is in the upper left panel.\n\nThe panel on the lower left is where the action happens. It's called the *console*. \nEverytime you launch RStudio, it will have the same text at the top of the \nconsole telling you the version of R that you're running. Below that information\nis the *prompt*. As its name suggests, this prompt is really a request, a \nrequest for a command. Initially, interacting with R is all about typing commands\nand interpreting the output. These commands and their syntax have evolved over\ndecades (literally) and now provide what many users feel is a fairly natural way\nto access data and organize, describe, and invoke statistical computations.\n\nThe panel in the upper right contains your *workspace* as well as a history of \nthe commands that you've previously entered. \n\nAny plots that you generate will show up in the panel in the lower right corner. \nThis is also where you can browse your files, access help, manage packages, etc.\n\n\n## R Packages\n\nR is an open-source programming language, meaning that users can contribute\npackages that make our lives easier, and we can use them for free. For this lab,\nand many others in the future, we will use the following R packages:\n\n- `statsr`: for data files and functions used in this course\n- `dplyr`: for data wrangling\n- `ggplot2`: for data visualization\n\nYou should have already installed these packages using commands like \n`install.packages` and `install_github`.\n\nNext, you need to load the packages in your working environment. We do this with\nthe `library` function. Note that you only need to **install** packages once, but\nyou need to **load** them each time you relaunch RStudio.\n\n```{r load-packages, message = FALSE}\nlibrary(dplyr)\nlibrary(ggplot2)\nlibrary(statsr)\n```\n\nTo do so, you can \n\n- click on the green arrow at the top of the code chunk in the R Markdown (Rmd) \nfile, or\n- highlight these lines, and hit the **Run** button on the upper right corner of the \npane, or\n- type the code in the console.\n\nGoing forward you will be asked to load any relevant packages at the beginning\nof each lab.\n\n## Dataset 1: Dr. Arbuthnot's Baptism Records\n\nTo get you started, run the following command to load the data.\n\n```{r load-abrbuthnot-data}\ndata(arbuthnot)\n```\n\nTo do so, once again, you can \n\n- click on the green arrow at the top of the code chunk in the R Markdown (Rmd) \nfile, or\n- put your cursor on this line, and hit the **Run** button on the upper right \ncorner of the pane, or\n- type the code in the console.\n\nThis command instructs R to load some data. The Arbuthnot baptism counts for boys \nand girls. You should see that the workspace area in the upper righthand corner of \nthe RStudio window now lists a data set called `arbuthnot` that has 82 observations \non 3 variables. As you interact with R, you will create a series of objects. \nSometimes you load them as we have done here, and sometimes you create them yourself \nas the byproduct of a computation or some analysis you have performed.\n\nThe Arbuthnot data set refers to Dr. John Arbuthnot, an 18<sup>th</sup> century \nphysician, writer, and mathematician. He was interested in the ratio of newborn\nboys to newborn girls, so he gathered the baptism records for children born in\nLondon for every year from 1629 to 1710. We can take a look at the data by \ntyping its name into the console.\n\n```{r view-data}\narbuthnot\n```\n\nHowever printing the whole dataset in the console is not that useful. \nOne advantage of RStudio is that it comes with a built-in data viewer. Click on\nthe name `arbuthnot` in the *Environment* pane (upper right window) that lists \nthe objects in your workspace. This will bring up an alternative display of the \ndata set in the *Data Viewer* (upper left window). You can close the data viewer\nby clicking on the *x* in the upper lefthand corner.\n\nWhat you should see are four columns of numbers, each row representing a \ndifferent year: the first entry in each row is simply the row number (an index \nwe can use to access the data from individual years if we want), the second is \nthe year, and the third and fourth are the numbers of boys and girls baptized \nthat year, respectively. Use the scrollbar on the right side of the console \nwindow to examine the complete data set.\n\nNote that the row numbers in the first column are not part of Arbuthnot's data. \nR adds them as part of its printout to help you make visual comparisons. You can\nthink of them as the index that you see on the left side of a spreadsheet. In \nfact, the comparison to a spreadsheet will generally be helpful. R has stored \nArbuthnot's data in a kind of spreadsheet or table called a *data frame*.\n\nYou can see the dimensions of this data frame by typing:\n\n```{r dim-data}\ndim(arbuthnot)\n```\n\nThis command should output `[1] 82 3`, indicating that there are 82 rows and 3 \ncolumns (we'll get to what the `[1]` means in a bit), just as it says next to \nthe object in your workspace. You can see the names of these columns (or \nvariables) by typing:\n\n```{r names-data}\nnames(arbuthnot)\n```\n\n1. How many variables are included in this data set? \n<ol>\n<li> 2 </li>\n<li> 3 </li>\n<li> 4 </li>\n<li> 82 </li>\n<li> 1710 </li>\n</ol>\n\n<div id=\"exercise\">\n**Exercise**: What years are included in this dataset? Hint: Take a look at the year \nvariable in the Data Viewer to answer this question.\n</div>\n\nYou should see that the data frame contains the columns `year`,  `boys`, and \n`girls`. At this point, you might notice that many of the commands in R look a \nlot like functions from math class; that is, invoking R commands means supplying\na function with some number of arguments. The `dim` and `names` commands, for \nexample, each took a single argument, the name of a data frame.\n\n<div id=\"boxedtext\">\n**Tip: ** If you use the up and down arrow keys, you can scroll through your \nprevious commands, your so-called command history. You can also access it \nby clicking on the history tab in the upper right panel. This will save \nyou a lot of typing in the future.\n</div>\n\n### R Markdown\n\nSo far we asked you to type your commands in the console. The console is a great \nplace for playing around with some code, however it is not a good place for \ndocumenting your work. Working in the console exclusively makes it difficult to \ndocument your work as you go, and reproduce it later. \n\nR Markdown is a great solution for this problem. And, you already have worked with \nan R Markdown document -- this lab! Going forward type the code for the questions \nin the code chunks provided in the R Markdown (Rmd) document for the lab, and **Knit**\nthe document to see the results.\n\n### Some Exploration\n\nLet's start to examine the data a little more closely. We can access the data in\na single column of a data frame separately using a command like\n\n```{r view-boys}\narbuthnot$boys\n```\n\nThis command will only show the number of boys baptized each year. The dollar\nsign basically says \"go to the data frame that comes before me, and find the \nvariable that comes after me\".\n\n2. What command would you use to extract just the counts of girls born? \n<ol>\n<li> `arbuthnot$boys` </li>\n<li> `arbuthnot$girls` </li>\n<li> `girls` </li>\n<li> `arbuthnot[girls]` </li>\n<li> `$girls` </li>\n</ol>\n\n```{r extract-counts-of-girls-born}\n# type your code for the Question 2 here, and Knit\narbuthnot$girls\n```\n\nNotice that the way R has printed these data is different. When we looked at the\ncomplete data frame, we saw 82 rows, one on each line of the display. These data\nare no longer structured in a table with other variables, so they are displayed \none right after another. Objects that print out in this way are called vectors; \nthey represent a set of numbers. R has added numbers in [brackets] along the left\nside of the printout to indicate locations within the vector. For example, in the arbuthnot$boys vector, 5218  follows [1], indicating that 5218 is the first entry in the vector. And if [43] starts a line, then that would mean the first number on that line would represent the 43rd entry in the vector.\n\nR has some powerful functions for making graphics. We can create a simple plot \nof the number of girls baptized per year with the command\n\n```{r plot-girls-vs-year}\nggplot(data = arbuthnot, aes(x = year, y = girls)) +\n  geom_point()\n```\n\nBefore we review the code for this plot, let's summarize the trends we see in the \ndata.\n\n1. Which of the following best describes the number of girls baptised over the years included in this dataset? \n<ol>\n<li> There appears to be no trend in the number of girls baptised from 1629 to 1710. </li>\n<li> There is initially an increase in the number of girls baptised, which peaks around 1640. After 1640 there is a decrease in the number of girls baptised, but the number begins to increase again in 1660. Overall the trend is an increase in the number of girls baptised. </li>\n<li> There is initially an increase in the number of girls baptised. This number peaks around 1640 and then after 1640 the number of girls baptised decreases. </li>\n<li> The number of girls baptised has decreased over time. </li>\n<li> There is an initial increase in the number of girls baptised but this number appears to level around 1680 and not change after that time point. </li>\n</ol>\n\nBack to the code... We use the `ggplot()` function to build plots. If you run the \nplotting code in your console, you should see the plot appear under the *Plots* tab \nof the lower right panel of RStudio. Notice that the command above again looks like \na function, this time with arguments separated by commas. \n\n- The first argument is always the dataset. \n- Next, we provide thevariables from the dataset to be assigned to `aes`thetic \nelements of the plot, e.g. the x and the y axes. \n- Finally, we use another layer, separated by a `+` to specify the `geom`etric \nobject for the plot. Since we want to scatterplot, we use `geom_point`.\n\nYou might wonder how you are supposed to know the syntax for the `ggplot` function. \nThankfully, R documents all of its functions extensively. To read what a function \ndoes and learn the arguments that are available to you, just type in a question mark \nfollowed by the name of the function that you're interested in. Try the following in\nyour console:\n\n```{r plot-help, tidy = FALSE}\n#?ggplot\n```\n\nNotice that the help file replaces the plot in the lower right panel. You can \ntoggle between plots and help files using the tabs at the top of that panel. \n\n<div id=\"boxedtext\">\nMore extensive help for plotting with the `ggplot2` package can be found at \nhttp://docs.ggplot2.org/current/. The best (and easiest) way to learn the syntax is \nto take a look at the sample plots provided on that page, and modify the code \nbit by bit until you get achieve the plot you want.\n</div>\n\n### R as a big calculator\n\nNow, suppose we want to plot the total number of baptisms. To compute this, we \ncould use the fact that R is really just a big calculator. We can type in \nmathematical expressions like\n\n```{r calc-total-bapt-numbers}\n5218 + 4683\n```\n\nto see the total number of baptisms in 1629. We could repeat this once for each \nyear, but there is a faster way. If we add the vector for baptisms for boys to \nthat of girls, R will compute all sums simultaneously.\n\n```{r calc-total-bapt-vars}\narbuthnot$boys + arbuthnot$girls\n```\n\nWhat you will see are 82 numbers (in that packed display, because we aren’t \nlooking at a data frame here), each one representing the sum we’re after. Take a\nlook at a few of them and verify that they are right.\n\n### Adding a new variable to the data frame\n\nWe'll be using this new vector to generate some plots, so we'll want to save it \nas a permanent column in our data frame.\n\n```{r calc-total-bapt-vars-save}\narbuthnot <- arbuthnot %>%\n  mutate(total = boys + girls)\n```\n\nWhat in the world is going on here? The `%>%` operator is called the **piping** \noperator. Basically, it takes the output of the current line and pipes it into \nthe following line of code.\n\n<div id=\"boxedtext\">\n**A note on piping: ** Note that we can read these three lines of code as the following: \n\n*\"Take the `arbuthnot` dataset and **pipe** it into the `mutate` function. \nUsing this mutate a new variable called `total` that is the sum of the variables\ncalled `boys` and `girls`. Then assign this new resulting dataset to the object\ncalled `arbuthnot`, i.e. overwrite the old `arbuthnot` dataset with the new one\ncontaining the new variable.\"*\n\nThis is essentially equivalent to going through each row and adding up the boys \nand girls counts for that year and recording that value in a new column called\ntotal.\n</div>\n\n<div id=\"boxedtext\">\n**Where is the new variable? ** When you make changes to variables in your dataset, \nclick on the name of the dataset again to update it in the data viewer.\n</div>\n\nYou'll see that there is now a new column called `total` that has been tacked on\nto the data frame. The special symbol `<-` performs an *assignment*, taking the \noutput of one line of code and saving it into an object in your workspace. In \nthis case, you already have an object called `arbuthnot`, so this command updates\nthat data set with the new mutated column.\n\nWe can make a plot of the total number of baptisms per year with the following command.\n\n```{r plot-total-vs-year-line}\nggplot(data = arbuthnot, aes(x = year, y = total)) +\n  geom_line()\n```\n\nNote that using `geom_line()` instead of `geom_point()` results in a line plot instead\nof a scatter plot. You want both? Just layer them on:\n\n```{r plot-total-vs-year-line-and-point}\nggplot(data = arbuthnot, aes(x = year, y = total)) +\n  geom_line() +\n  geom_point()\n```\n\n<div id=\"exercise\">\n**Exercise**: Now, generate a plot of the proportion of boys born over time. What \ndo you see? \n</div>\n\n```{r plot-proportion-of-boys-over-time}\nggplot(data = arbuthnot, aes(x = year, y = boys)) +\n  geom_line() +\n  geom_point()\n```\n\nFinally, in addition to simple mathematical operators like subtraction and \ndivision, you can ask R to make comparisons like greater than, `>`, less than,\n`<`, and equality, `==`. For example, we can ask if boys outnumber girls in each \nyear with the expression\n\n```{r boys-more-than-girls}\narbuthnot <- arbuthnot %>%\n  mutate(more_boys = boys > girls)\n```\n\nThis command add a new variable to the `arbuthnot` data frame containing the values\nof either `TRUE` if that year had more boys than girls, or `FALSE` if that year \ndid not (the answer may surprise you). This variable contains different kind of \ndata than we have considered so far. All other columns in the `arbuthnot` data \nframe have values are numerical (the year, the number of boys and girls). Here, \nwe've asked R to create *logical* data, data where the values are either `TRUE` \nor `FALSE`. In general, data analysis will involve many different kinds of data \ntypes, and one reason for using R is that it is able to represent and compute \nwith many of them.\n\n\n## Dataset 2: Present birth records\n\nIn the previous few pages, you recreated some of the displays and preliminary \nanalysis of Arbuthnot's baptism data. Next you will do a similar analysis, \nbut for present day birth records in the United States. Load up the \npresent day data with the following command.\n\n```{r load-present-data}\ndata(present)\n```\n\nThe data are stored in a data frame called `present` which should now be loaded in \nyour workspace.\n\n4. How many variables are included in this data set?\n<ol>\n<li> 2 </li>\n<li> 3 </li>\n<li> 4 </li>\n<li> 74 </li>\n<li> 2013 </li>\n</ol>\n\n```{r variables-in-present}\nnames( present )\n```\n\n<div id=\"exercise\">\n**Exercise**: What years are included in this dataset? **Hint:** Use the `range` \nfunction and `present$year` as its argument.\n</div>\n\n```{r years-in-present-data}\nrange( present$year )\n```\n\n5. Calculate the total number of births for each year and store these values in a new \nvariable called `total` in the `present` dataset. Then, calculate the proportion of \nboys born each year and store these values in a new variable called `prop_boys` in \nthe same dataset. Plot these values over time and based on the plot determine if the \nfollowing statement is true or false: The proportion of boys born in the US has \ndecreased over time. \n<ol>\n<li> True </li>\n<li> False </li>\n</ol>\n\n```{r prop-boys-over-time}\npresent <- present %>% mutate( total = boys + girls, prop_boys = boys / total )\nggplot( data = present, aes( x = year, y = prop_boys ) ) +\n  geom_line() +\n  geom_point()\n```\n\n\n6. Create a new variable called `more_boys` which contains the value of either `TRUE` \nif that year had more boys than girls, or `FALSE` if that year did not. Based on this \nvariable which of the following statements is true? \n<ol>\n<li> Every year there are more girls born than boys. </li>\n<li> Every year there are more boys born than girls. </li>\n<li> Half of the years there are more boys born, and the other half more girls born. </li>\n</ol>\n\n```{r more-boys-per-year}\npresent <- present %>% mutate( more_boys = boys > girls )\nprint( paste0( \"More boys in: \", sum( present$more_boys ) / nrow( present ) * 100, \"%\" ) )\n```\n\n\n7. Calculate the boy-to-girl ratio each year, and store these values in a new variable called `prop_boy_girl` in the `present` dataset. Plot these values over time. Which of the following best describes the trend? \n<ol>\n<li> There appears to be no trend in the boy-to-girl ratio from 1940 to 2013. </li>\n<li> There is initially an increase in boy-to-girl ratio, which peaks around 1960. After 1960 there is a decrease in the boy-to-girl ratio, but the number begins to increase in the mid 1970s. </li>\n<li> There is initially a decrease in the boy-to-girl ratio, and then an increase between 1960 and 1970, followed by a decrease. </li>\n<li> The boy-to-girl ratio has increased over time. </li>\n<li> There is an initial decrease in the boy-to-girl ratio born but this number appears to level around 1960 and remain constant since then. </li>\n</ol>\n\n```{r prop-boy-girl-over-time}\npresent <- present %>% mutate( prop_boy_girl = boys / girls )\nggplot( data = present, aes( x = year, y = prop_boy_girl ) ) +\n  geom_line() +\n  geom_point()\n```\n\n8. In what year did we see the most total number of births in the U.S.? *Hint:* Sort \nyour dataset in descending order based on the `total` column. You can do this \ninteractively in the data viewer by clicking on the arrows next to the variable \nnames. Or to arrange the data in a descenting order with new function: `descr` (for \ndescending order).\n<ol>\n<li> 1940 </li>\n<li> 1957 </li>\n<li> 1961 </li>\n<li> 1991 </li>\n<li> 2007 </li>\n</ol>\n\n```{r most-total-births}\n# type your code for Question 8 here\n# sample code is provided below, edit as necessary, uncomment, and then Knit\npresent %>%\n  mutate( total = boys + girls ) %>%\n  arrange( desc( total ) )\n```\n\n## Resources for learning R and working in RStudio\n\nThat was a short introduction to R and RStudio, but we will provide you with more\nfunctions and a more complete sense of the language as the course progresses. You \nmight find the following tips and resources helpful.\n\n- In this course we will be using the `dplyr` (for data wrangling) and `ggplot2` (for \ndata visualization) extensively. If you are googling for R code, make sure\nto also include these package names in your search query. For example, instead\nof googling \"scatterplot in R\", google \"scatterplot in R with ggplot2\".\n\n- The following cheathseets may come in handy throughout the course. Note that some \nof the code on these cheatsheets may be too advanced for this course, however \nmajority of it will become useful as you progress through the course material.\n    - [Data wrangling cheatsheet](http://www.rstudio.com/wp-content/uploads/2015/02/data-wrangling-cheatsheet.pdf)\n    - [Data visualization cheatsheet](http://www.rstudio.com/wp-content/uploads/2015/12/ggplot2-cheatsheet-2.0.pdf)\n    - [R Markdown](http://www.rstudio.com/wp-content/uploads/2016/03/rmarkdown-cheatsheet-2.0.pdf)\n\n- While you will get plenty of exercise working with these packages in the labs of \nthis course, if you would like further opportunities to practice we recommend \nchecking out the relevant courses at [DataCamp](https://www.datacamp.com/courses).\n\n<div id=\"license\">\nThis is a derivative of an [OpenIntro](https://www.openintro.org/stat/labs.php) lab, and is released under a [Attribution-NonCommercial-ShareAlike 3.0 United States](https://creativecommons.org/licenses/by-nc-sa/3.0/us/) license.\n</div>",
    "created" : 1466790449750.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2990473805",
    "id" : "81A1EEFC",
    "lastKnownWriteTime" : 1466792673,
    "last_content_update" : 1466792673659,
    "path" : "~/GitHub/stats_with_r/intro_to_prob_and_data/week1_lab/intro_to_r_Coursera.Rmd",
    "project_path" : "week1_lab/intro_to_r_Coursera.Rmd",
    "properties" : {
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_markdown"
}